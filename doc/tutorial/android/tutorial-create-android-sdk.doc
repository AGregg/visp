/**

\page tutorial-create-android-sdk Tutorial: Building ViSP SDK for Android
\tableofcontents

\section android_sdk_getting_started Getting Started
This tutorial is designed to help you build ViSP Android SDK which can be used to create Android Apps supporting ViSP Java functionalities.

This tutorial assumes you have the following software installed and configured:
- <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java Development Kit (JDK)</a><br>
See how to \ref java_install_jdk.
- <a href="https://developer.android.com/studio/">Android SDK and NDK</a><br>
Follow the link to <a href="https://developer.android.com/studio/">Android Studio</a>, download and install Android Studio. Once installed start Android Studio using default settings. This allows to download Android SDK that will be installed in `$HOME/Android/sdk` on Ubuntu or in `$HOME/Library/Android/sdk` folder on OSX. Now to install Android NDK, with Android Studio create a new Android project. As described in this <a href="https://developer.android.com/ndk/guides/#download-ndk">guide</a>, from this new project enter `"Android SDK"` settings, select the `"SDK Tools"` tab and check the boxes next to `LLDB`, `CMake`, and `NDK`. To access to `"Android SDK"` settings pannel on Ubuntu go through `"File > Settings..."` menu, while under OSX, go through `"Android Studio > Preferences"` menu.   

- <a href="https://www.python.org/downloads/">Python Interpreter (prefer versions 2.7 or 3.6)</a><br>
On Ubuntu use:
\code
$ sudo apt-get install python
\endcode
On OSX use rather
\code
$ brew install python
\endcode

- <a href="https://ant.apache.org/bindownload.cgi">Apache Ant</a><br>
On Ubuntu use:
\code
$ sudo apt-get install ant
\endcode
On OSX use rather
\code
$ brew install ant
\endcode

- <a href="https://cmake.org/download/">CMake</a><br>
On Ubuntu use:
\code
$ sudo apt-get install cmake-curses-gui
\endcode
On OSX use rather
\code
$ brew install cmake
\endcode

- <a href="https://github.com/ninja-build/ninja/releases">Ninja</a><br>
On Ubuntu use:
\code
$ sudo apt-get install ninja
\endcode
On OSX use rather
\code
$ brew install ninja
\endcode

Optionally, you can install a compiler cache for a faster build
- <a href="https://ccache.samba.org/">ccache</a>

\section android_sdk_ws Create a workspace

Create a workspace in `$HOME/visp-ws` that will contain ViSP sources, build and dataset.
\code
$ export VISP_WS=$HOME/visp-ws
$ mkdir -p $VISP_WS
\endcode

\section android_sdk_get_source Get ViSP source code

There are different ways to get ViSP source code:

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once downloaded, uncompress the file using either
\code
$ tar xvzf visp-x.y.z.tar.gz -C $VISP_WS
\endcode
or
\code
$ unzip visp-x.y.z.zip -d $VISP_WS
\endcode

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once downloaded, uncompress the file using
\code
$ tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz -C $VISP_WS
\endcode

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the following command
\code
$ cd $VISP_WS
$ git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in the directory `$VISP_WS/visp`. The following should be adapted if you downloaded ViSP from a zip or tarball. In that case, the source is rather in something like `$VISP_WS/visp-x.y.z`.

\section android_sdk_build Build the Android SDK

Note that the scripts for building the SDK are included in the source code.

In the workspace create a build folder
\code
$ mkdir $VISP_WS/visp-build-android-sdk
\endcode

Open the directory having ViSP source code. Head to `visp/platforms/android` directory in it. Open terminal or command line in that folder and use the build script like:
\code
$ cd $VISP_WS/visp/platforms/android
$ python build_sdk.py --config ndk.config.py --sdk_path <path-to-Android-Sdk> --ndk_path <path-to-Android-Sdk>/ndk-bundle <installation-directory> <visp-source-code-directory>
\endcode

For example, on Ubuntu the command might look like
\code
$ python build_sdk.py --config ndk-18.config.py --sdk_path $HOME/Android/Sdk --ndk_path $HOME/Android/Sdk/ndk-bundle $VISP_WS/visp-build-android-sdk $VISP_WS/visp
\endcode

While for example, on OSX the command might rather look like
\code
$ python build_sdk.py --config ndk-18.config.py --sdk_path $HOME/Library/Android/sdk --ndk_path $HOME/Library/Android/sdk/ndk-bundle $VISP_WS/visp-build-android-sdk $VISP_WS/visp
\endcode

Above command will build SDK for multiple Android architectures. If you're aware on what Android architecture you'll be working on (refer <a href="https://android.gadgethacks.com/how-to/android-basics-see-what-kind-processor-you-have-arm-arm64-x86-0168051/">here</a>), say `x86_64`, you can do a minimal build by changing contents of `ndk.config.py` file
\code
ABIs = [
    ABI("5", "x86_64",      "x86_64-4.9")
]
\endcode
This will speed up the installation process.

If you're experiencing problems with `ccache` or if you don't install `ccache`, you can try a build without it adding `--no_ccache` command line option like:
\code
$ python build_sdk.py --no_ccache --config ndk-18.config.py --sdk_path $HOME/Android/Sdk --ndk_path $HOME/Android/Sdk/ndk-bundle $VISP_WS/visp-build-android-sdk $VISP_WS/visp
\endcode

\section android_sdk_next Next tutorial

You are now ready to follow \ref tutorial-android-getting-started where you'll be creating a sample Android App using ViSP SDK.

*/
